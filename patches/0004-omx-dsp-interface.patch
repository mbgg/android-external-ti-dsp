diff -pruN a/omx_ti/interface/config.bld b/omx_ti/interface/config.bld
--- a/omx_ti/interface/config.bld	1970-01-01 03:00:00.000000000 +0300
+++ b/omx_ti/interface/config.bld	2010-09-17 14:34:03.000000000 +0400
@@ -0,0 +1,40 @@
+/*
+ *  ======== config.bld ========
+ * User note: YOU MUST MODIFY THIS FILE TO SPECIFY THE COMPILER TOOL PATHS.
+ *
+ * Edit this file to specify compiler toolchain paths, and any custom
+ * compiler/linker options.
+ */
+
+/* location of your C6000 codegen tools */
+var C64P = xdc.useModule('ti.targets.C64P');
+
+
+C64P.rootDir = "/opt/dmsw/cg6x_6_0_16/";
+C64P.platform = "ti.platforms.evmDM6446"; 
+
+var GCArmv7A = xdc.useModule('gnu.targets.arm.GCArmv7A');
+GCArmv7A.rootDir = "" + java.lang.System.getenv("MVTOOL_DIR");
+GCArmv7A.LONGNAME = java.lang.System.getenv("ANDROID_TOOLCHAIN_LONGNAME");
+
+GCArmv7A.ccOpts.prefix += " -Wall -fno-strict-aliasing " + java.lang.System.getenv("ANDROID_CFLAGS");
+
+GCArmv7A.lnkOpts.suffix = GCArmv7A.lnkOpts.suffix.replace("-lstdc++","");
+GCArmv7A.lnkOpts.suffix += java.lang.System.getenv("ANDROID_LDFLAGS");
+
+GCArmv7A.platforms = [
+    "ti.platforms.evm3530"
+];
+
+Build.targets.$add(GCArmv7A);
+
+/*
+ *  ======== Build.targets ========
+ * list of targets (ISAs + compilers) to build for
+ */
+/*
+Build.targets = [
+    C64P,
+];
+*/
+
diff -pruN a/omx_ti/interface/iface.cpp b/omx_ti/interface/iface.cpp
--- a/omx_ti/interface/iface.cpp	1970-01-01 03:00:00.000000000 +0300
+++ b/omx_ti/interface/iface.cpp	2010-09-17 14:34:03.000000000 +0400
@@ -0,0 +1,100 @@
+/*******************************************************************************
+ * iface.cpp
+ *
+ * Simple interface for Android mediaserver to open Codec Engine.  
+ *
+ * Copyright (C) 2010 Alexander Smirnov <asmirnov.bluesman@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+#define MODULE_TAG                      INTERFACE
+
+#include "omx-dsp.h"
+#include "iface.h"
+#include <ti/sdo/dmai/ce/Adec1.h>
+
+#include <ti/sdo/ce/osal/Memory.h>
+#include <ti/sdo/ce/osal/Lock.h>
+#include <ti/sdo/ce/ipc/Comm.h>
+#include <ti/sdo/ce/ipc/Processor.h>
+#include <ti/sdo/ce/osal/Queue.h>
+#include <ti/sdo/ce/osal/Global.h>
+
+/* ...tracing configuration */
+TRACE_TAG (INIT,    1);
+TRACE_TAG (DATA,    1);
+TRACE_TAG (PROCESS, 1);
+TRACE_TAG (DEBUG,   1);
+TRACE_TAG (ERROR,   1);
+TRACE_TAG (INFO,    1);
+
+InterfaceClass::InterfaceClass()
+{
+    TRACE(INFO, _b("Construct interface class"));
+}
+
+InterfaceClass::~InterfaceClass()
+{
+    TRACE(INFO, _b("Destroy interface class"));
+}
+
+extern "C" {
+Engine_Handle global_engine_handle;
+}
+
+void InterfaceClass::EngineInit()
+{
+    Engine_Error        ec;
+
+    TRACE(INFO, _b("EngineInit IN"));
+
+    /* ...initialize codec engine runtime */
+    CERuntime_init ();
+
+    /* ...initialize DMAI framework */
+    Dmai_init ();
+
+    if ((global_engine_handle = Engine_open(String("codecServer"), NULL, &ec)) == NULL)
+    {
+        TRACE (ERROR, _b("Failed to open engine 'codecServer': %X"), (unsigned) ec);
+        return;
+    }
+
+    TRACE(INFO, _b("EngineInit OUT"));
+}
+
+/*
+ * Currently there is no method to call this function. No
+ * exit signals or callbacks from the mediaserver weren't found. But the call is important 
+ * becasuse if mediaserver crashes, codec server cannot be re-opened without
+ * closing.
+ */
+void InterfaceClass::EngineDeInit(void)
+{
+    TRACE(INFO, _b("EngineClose IN-OUT"));
+
+    Engine_close(global_engine_handle);
+    global_engine_handle = NULL;
+
+    CERuntime_exit ();
+}
+
+/*
+ * Temporary debug function
+ * to-be-removed
+ */
+void InterfaceClass::Adec(void)
+{
+    return;
+}
diff -pruN a/omx_ti/interface/iface.h b/omx_ti/interface/iface.h
--- a/omx_ti/interface/iface.h	1970-01-01 03:00:00.000000000 +0300
+++ b/omx_ti/interface/iface.h	2010-09-17 14:34:03.000000000 +0400
@@ -0,0 +1,42 @@
+/*******************************************************************************
+ * iface.h
+ *
+ * Simple interface for Android mediaserver to open Codec Engine.  
+ *
+ * Copyright (C) 2010 Alexander Smirnov <asmirnov.bluesman@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+#ifndef __IFACE_H
+#define __IFACE_H
+
+#include <xdc/std.h>
+#include <ti/sdo/ce/Engine.h>
+#include <ti/sdo/ce/CERuntime.h>
+#include <ti/sdo/dmai/Dmai.h>
+
+class InterfaceClass
+{
+public:
+    InterfaceClass();
+    ~InterfaceClass();
+
+    void          EngineInit(void);
+    void          EngineDeInit(void);
+
+    /* For testing/debugging only, to-be-removed */
+    void           Adec(void);
+};
+
+#endif /* __IFACE_H */
diff -pruN a/omx_ti/interface/Makefile b/omx_ti/interface/Makefile
--- a/omx_ti/interface/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ b/omx_ti/interface/Makefile	2010-09-17 14:34:03.000000000 +0400
@@ -0,0 +1,20 @@
+XDC_CONFIG_BASENAME = omx_dsp_iface_$(PLATFORM)
+CONFIGURO     = $(XDC_INSTALL_DIR)/xs xdc.tools.configuro
+BUILT_SOURCES = $(XDC_CONFIG_BASENAME)/compiler.opt $(XDC_CONFIG_BASENAME)/linker.cmd
+XDC_PATH      = .;$(XDC_INSTALL_DIR)/packages;$(LINK_INSTALL_DIR)/packages;$(FC_INSTALL_DIR)/packages;$(CE_INSTALL_DIR)/packages;$(XDAIS_INSTALL_DIR)/packages;$(CODEC_INSTALL_DIR)/packages;$(CMEM_INSTALL_DIR)/packages;$(DMAI_INSTALL_DIR)/packages;$(LPM_INSTALL_DIR)/packages;$(XDC_USER_PATH);$(EDMA3_LLD_INSTALL_DIR)/packages;
+
+engineiface_objs = \
+	iface.o
+
+xdc_config:
+	XDCPATH="$(XDC_PATH)" $(CONFIGURO) -c $(MVTOOL_DIR) -o  $(XDC_CONFIG_BASENAME) -t gnu.targets.arm.GCArmv7A -p $(XDC_PLATFORM) -b config.bld omx_dsp_iface_$(PLATFORM).cfg
+
+COMPILER_OPT = $(shell cat $(XDC_CONFIG_BASENAME)/compiler.opt) -I../include
+
+all: xdc_config
+	$(CXX) -DHAVE_CONFIG_H $(CFLAGS) $(COMPILER_OPT) -c -o iface.o iface.cpp
+	$(CXX) $(LDFLAGS) $(engineiface_objs) -T $(XDC_CONFIG_BASENAME)/linker.cmd -Wl,-soname -Wl,libdspengineiface.so -o libdspengineiface.so
+
+clean:
+	rm -rf *.o *.so omx_dsp_iface_$(PLATFORM)
+
diff -pruN a/omx_ti/interface/omx_dsp_iface_omap3530.cfg b/omx_ti/interface/omx_dsp_iface_omap3530.cfg
--- a/omx_ti/interface/omx_dsp_iface_omap3530.cfg	1970-01-01 03:00:00.000000000 +0300
+++ b/omx_ti/interface/omx_dsp_iface_omap3530.cfg	2010-09-17 14:34:03.000000000 +0400
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) $year Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify 
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation version 2.1 of the License.
+ *
+ * This program is distributed #as is# WITHOUT ANY WARRANTY of any kind,
+ * whether express or implied; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ */
+
+/* Load the Codec Engine 'Operating System Abstraction Layer' */
+var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
+
+var os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');
+osalGlobal.os = os;
+
+/* Configure CE to use it's DSP Link Linux version */
+var ipc = xdc.useModule('ti.sdo.ce.ipc.Settings');
+ipc.commType = ipc.COMM_DSPLINK;
+
+/*
+ *  ======== Engine Configuration ========
+ */
+var Engine = xdc.useModule('ti.sdo.ce.Engine');
+var demoEngine = Engine.createFromServer(
+    "codecServer",
+    "./bin/cs.x64P",
+    "ti.sdo.server.cs"
+    );
+
+/*
+ * var combopath = "" + java.lang.System.getenv("CODEC_SERVER");
+ * if (combopath != "" && combopath != "null") {
+ *	demoEngine.server = java.lang.System.getenv("CODEC_SERVER");
+ * }
+ */
+demoEngine.server = "/system/ti-dsp/cs.x64P";
+ 
+/* Load support for the DMAI module */
+var DMAI = xdc.loadPackage('ti.sdo.dmai');
+
+var SCPY = xdc.useModule('ti.sdo.fc.scpy.SCPY');
+var SDMA = xdc.useModule('ti.sdo.linuxutils.sdma.SDMA');
+
+/*
+ * var TraceUtil = xdc.useModule('ti.sdo.ce.utils.trace.TraceUtil');
+ * TraceUtil.attrs = TraceUtil.FULL_TRACING;
+ */
\ No newline at end of file
